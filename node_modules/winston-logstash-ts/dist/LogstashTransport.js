"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var dgram = require("dgram");
var net = require("net");
var os = require("os");
var winston = require("winston");
var Transport = require("winston-transport");
var debugging = require("debug");
var debug = debugging("winston-logstash-ts:LogStashTransport");
var LogstashTransport = /** @class */ (function (_super) {
    __extends(LogstashTransport, _super);
    function LogstashTransport(options) {
        var _this = _super.call(this, options) || this;
        _this.name = "LogstashTransport";
        _this.tcpKeepAliveInitialDelay = 0;
        _this.host = options.host;
        _this.port = options.port;
        _this.silent = options.silent;
        _this.protocol = options.protocol || "udp";
        _this.tcpKeepAliveInitialDelay = options.tcpKeepAliveInitialDelay || 0;
        return _this;
    }
    LogstashTransport.prototype.connect = function () {
        return __awaiter(this, void 0, void 0, function () {
            var udpClient;
            var _this = this;
            return __generator(this, function (_a) {
                if (this.protocol === "udp") {
                    udpClient = dgram.createSocket("udp4");
                    udpClient.unref();
                    return [2 /*return*/, udpClient];
                }
                else if (this.protocol === "tcp") {
                    return [2 /*return*/, new Promise(function (resolve, reject) {
                            var tcpClient = new net.Socket();
                            var errorListener = function (error) {
                                debug.color = "196";
                                debug("%o", error);
                                tcpClient.destroy();
                                tcpClient.removeListener("error", connectListener);
                                reject(error);
                            };
                            var connectListener = function () {
                                debug.color = "46";
                                debug("TCP connection to %s:%d has been established.", _this.host, _this.port);
                                // tcpClient.setKeepAlive(true, this.tcpKeepAliveInitialDelay);
                                // tcpClient.unref();
                                tcpClient.removeListener("connect", connectListener);
                                resolve(tcpClient);
                            };
                            tcpClient.on("error", errorListener);
                            tcpClient.on("connect", connectListener);
                            tcpClient.on("close", function () {
                                debug.color = "196";
                                debug("TCP connection to %s:%d has been closed.", _this.host, _this.port);
                            });
                            tcpClient.connect(_this.port, _this.host);
                        })];
                }
                else {
                    throw new Error("Invalid protocol, only support TCP and UDP.");
                }
                return [2 /*return*/];
            });
        });
    };
    LogstashTransport.prototype.log = function (info, callback) {
        var _this = this;
        if (this.silent) {
            return callback(null, true);
        }
        this.send(info[Symbol.for("message")], callback)
            .then(function (result) {
            _this.emit("logged", result);
        })
            .catch(function (error) {
            debug.color = "196";
            debug("An unexpected error occured, transporting to logstash is disabled now.", error.stack);
        });
    };
    LogstashTransport.prototype.send = function (message, callback) {
        return __awaiter(this, void 0, void 0, function () {
            var transformed, buf, udpClient, tcpClient_1, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        transformed = JSON.stringify(this.format.transform(JSON.parse(message)));
                        buf = Buffer.from(transformed);
                        if (!(this.protocol === "udp")) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.connect()];
                    case 1:
                        udpClient = (_a.sent());
                        udpClient.send(buf, 0, buf.length, this.port, this.host, function (error, bytes) {
                            if (callback) {
                                callback(error, bytes);
                            }
                        });
                        return [3 /*break*/, 6];
                    case 2:
                        _a.trys.push([2, 5, , 6]);
                        return [4 /*yield*/, this.connect()];
                    case 3:
                        tcpClient_1 = (_a.sent());
                        return [4 /*yield*/, new Promise(function (resolve, reject) {
                                tcpClient_1.write(transformed, function (error) {
                                    if (callback) {
                                        callback();
                                    }
                                    tcpClient_1.destroy();
                                    if (error) {
                                        reject(error);
                                    }
                                    else {
                                        resolve();
                                    }
                                });
                            })];
                    case 4:
                        _a.sent();
                        return [3 /*break*/, 6];
                    case 5:
                        error_1 = _a.sent();
                        if (callback) {
                            callback();
                        }
                        throw error_1;
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    LogstashTransport.createLogger = function (logType, logstashOption) {
        var appendMetaInfo = winston.format(function (info) {
            return Object.assign(info, {
                application: logType || logstashOption.application,
                hostname: logstashOption.hostname || os.hostname(),
                pid: process.pid,
                time: new Date(),
            });
        });
        return winston.createLogger({
            level: logstashOption.level || "info",
            format: winston.format.combine(appendMetaInfo(), winston.format.json(), winston.format.timestamp()),
            transports: [
                new LogstashTransport(logstashOption)
            ].concat(logstashOption.transports || [])
        });
    };
    return LogstashTransport;
}(Transport));
exports.LogstashTransport = LogstashTransport;
